#!/bin/sh

export DISPLAY=:0

_run_user_cmd() {
  cmd=$1
  user=@@USERNAME@@

  su -c "$cmd" "$user"
}

_notify() {
  msg=$1
  app="usb-rofi"
  icon="/usr/share/$app/usb-icon.png"
  cmd="notify-send \"$app\" -i \"$icon\" \"$msg\""

  _run_user_cmd "$cmd"
}

_rofi() {
  msg=$1
  cmd="rofi -dmenu -p \"$msg\""

  _run_user_cmd "$cmd"
}

_mount() {
  dev=$1
  mount_point=$2

  eval "$MOUNT_CMD $dev $mount_point"
}

_umount() {
  mount_point=$1

  eval "$UMOUNT_CMD $mount_point"
}

_set_env() {
  pid_1=$(cat /proc/1/comm)

  case $pid_1 in
    systemd)
      MOUNT_CMD="systemd-mount --no-block --collect"
      UMOUNT_CMD="systemd-umount" ;;
    *)
      MOUNT_CMD="mount"
      UMOUNT_CMD="umount" ;;
  esac
}

do_umount() {
  dev=$(df -h | grep ^/dev | _rofi "Select the device to umount")
  mount_point=$(echo "$dev" | awk '{print $6}')

  if [ -s "$mount_point" ]; then
    if _umount "$mount_point" ; then
      rmdir "$mount_point"

      _notify "Device umounted, now you can remove it safely"
    fi
  fi
}

do_mount() {
  dev=$1
  vendor=$2
  action=$(printf "mount\nignore" | _rofi "Device '$vendor $dev' detected")

  if [ "$action" = "mount" ]; then
    mount_point="/mnt/$vendor"

    mkdir -p "$mount_point"
    if _mount "$dev" "$mount_point" ; then
      _notify "Device $dev mounted at $mount_point"
    fi
  fi
}

do_clean() {
  mount_point=$1

  if [ -s "$mount_point" ]; then
    if _umount "$mount_point" ; then
      rmdir "$mount_point"
    fi
  fi
}

main() {
  _set_env

  while getopts 'd:c:u' op ; do
    case $op in
      d)
        dev_part=$(echo "$OPTARG" | cut -f1 -d":")
        dev_desc=$(echo "$OPTARG" | cut -f2 -d":")

        do_mount "$dev_part" "$dev_desc" ;;
      c) do_clean "$OPTARG" ;;
      u) do_umount ;;
      *) ;;
    esac
  done
}

main "$@"
